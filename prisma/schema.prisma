// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  passwordHash String  @map("password_hash")
  displayName String?
  avatarUrl   String?  @map("avatar_url")
  role        String   @default("user")
  xp          Int      @default(0)
  level       Int      @default(1)
  coins       Int      @default(0)
  gems        Int      @default(0)
  createdAt   DateTime @default(now()) @map("created_at")
  lastLoginAt DateTime? @map("last_login_at")

  // Relations
  sessions              Session[]
  userMissionProgress   UserMissionProgress[]
  userInventory         UserInventory[]
  userTransactions      UserTransaction[]
  userBets              UserBet[]
  userCrates            UserCrate[]
  userKeys              UserKey[]
  userPerks             UserPerk[]
  chatMessages          ChatMessage[]
  matchVotes            MatchVote[]
  gameHistory           GameHistory[]
  coinflipLobbiesAsCreator CoinflipLobby[] @relation("CoinflipCreator")
  coinflipLobbiesAsJoiner CoinflipLobby[] @relation("CoinflipJoiner")
  coinflipLobbiesAsWinner CoinflipLobby[] @relation("CoinflipWinner")
  userModeration        UserModeration[]
  forumPosts            ForumPost[]
  forumPostReactions    ForumPostReaction[]
  achievements          UserAchievement[]
  cs2SkinDeliveries     Cs2SkinDelivery[]
  gemTransactions       GemTransaction[]
  clientSeeds           ClientSeed[]
  gameResults           GameResult[]
  adminLogs             AdminLog[]

  @@map("users")
}

model Session {
  token     String   @id
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Mission System
model Mission {
  id               String   @id @default(cuid())
  title            String
  description      String
  type             String   @default("daily")
  tier             Int      @default(1)
  xpReward         Int      @default(0) @map("xp_reward")
  coinReward       Int      @default(0) @map("coin_reward")
  gemReward        Int      @default(0) @map("gem_reward")
  crateReward      String?  @map("crate_reward")
  requirementType  String   @map("requirement_type")
  requirementValue Int      @default(1) @map("requirement_value")
  isActive         Boolean  @default(true) @map("is_active")
  createdAt        DateTime @default(now()) @map("created_at")

  userMissionProgress UserMissionProgress[]

  @@map("missions")
}

model UserMissionProgress {
  userId      String    @map("user_id")
  missionId   String    @map("mission_id")
  progress    Int       @default(0)
  completed   Boolean   @default(false)
  completedAt DateTime? @map("completed_at")
  lastUpdated DateTime  @default(now()) @map("last_updated")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  mission Mission @relation(fields: [missionId], references: [id], onDelete: Cascade)

  @@id([userId, missionId])
  @@map("user_mission_progress")
}

// Inventory System
model UserInventory {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  itemId    String   @map("item_id")
  itemName  String   @map("item_name")
  itemType  String   @map("item_type")
  rarity    String
  imageUrl  String?  @map("image_url")
  value     Int      @default(0)
  equipped  Boolean  @default(false)
  slotType  String?  @map("slot_type")
  acquiredAt DateTime @default(now()) @map("acquired_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_inventory")
}

// Transaction System
model UserTransaction {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  type        String
  amount      Int
  currency    String   @default("coins")
  description String?
  itemId      String?  @map("item_id")
  createdAt   DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_transactions")
}

// Betting System
model UserBet {
  id              String   @id @default(cuid())
  userId          String   @map("user_id")
  matchId         String   @map("match_id")
  teamId          String   @map("team_id")
  amount          Int
  odds            Float
  potentialPayout Int      @map("potential_payout")
  status          String   @default("pending")
  result          String?
  payout          Int      @default(0)
  createdAt       DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_bets")
}

// Crate System
model UserCrate {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  crateId     String   @map("crate_id")
  crateName   String   @map("crate_name")
  keyRequired String?  @map("key_required")
  acquiredAt  DateTime @default(now()) @map("acquired_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_crates")
}

model UserKey {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  crateId    String   @map("crate_id")
  keysCount  Int      @default(0) @map("keys_count")
  acquiredAt DateTime @default(now()) @map("acquired_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, crateId])
  @@map("user_keys")
}

// Perk System
model UserPerk {
  id            String    @id @default(cuid())
  userId        String    @map("user_id")
  perkId        String    @map("perk_id")
  perkName      String    @map("perk_name")
  perkType      String    @map("perk_type")
  durationHours Int?      @map("duration_hours")
  expiresAt     DateTime? @map("expires_at")
  isActive      Boolean   @default(true) @map("is_active")
  appliedAt     DateTime  @default(now()) @map("applied_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_perks")
}

// Chat System
model ChatMessage {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  username  String
  message   String
  content   String
  avatarUrl String?  @map("avatar_url")
  channel   String   @default("arena")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

// Match Voting System
model MatchVote {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  matchId   String   @map("match_id")
  teamId    String   @map("team_id")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, matchId])
  @@map("match_votes")
}

model MatchVoteStats {
  matchId     String   @id @map("match_id")
  team1Votes  Int      @default(0) @map("team1_votes")
  team2Votes  Int      @default(0) @map("team2_votes")
  totalVotes  Int      @default(0) @map("total_votes")
  lastUpdated DateTime @default(now()) @map("last_updated")

  @@map("match_vote_stats")
}

// Game History
model GameHistory {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  gameType    String   @map("game_type")
  betAmount   Int      @map("bet_amount")
  winnings    Int      @default(0)
  profit      Int
  multiplier  Float?
  gameData    String?  @map("game_data")
  result      String
  tilesCleared Int     @default(0) @map("tiles_cleared")
  xpGained    Int      @default(0) @map("xp_gained")
  createdAt   DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("game_history")
}

// Coinflip System
model CoinflipLobby {
  id          String    @id @default(cuid())
  creatorId   String    @map("creator_id")
  joinerId    String?   @map("joiner_id")
  betAmount   Int       @map("bet_amount")
  side        String    // 'heads' or 'tails'
  status      String    @default("waiting") // 'waiting', 'playing', 'completed', 'expired'
  winnerId    String?   @map("winner_id")
  flipResult  String?   @map("flip_result") // 'heads' or 'tails'
  createdAt   DateTime  @default(now()) @map("created_at")
  expiresAt   DateTime  @map("expires_at")
  completedAt DateTime? @map("completed_at")

  creator User? @relation("CoinflipCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  joiner  User? @relation("CoinflipJoiner", fields: [joinerId], references: [id], onDelete: SetNull)
  winner  User? @relation("CoinflipWinner", fields: [winnerId], references: [id], onDelete: SetNull)

  @@map("coinflip_lobbies")
}

// Moderation System
model UserModeration {
  id           String    @id @default(cuid())
  userId       String    @map("user_id")
  action       String
  reason       String?
  moderatorId  String    @map("moderator_id")
  active       Boolean   @default(true)
  createdAt    DateTime  @default(now()) @map("created_at")
  expiresAt    DateTime? @map("expires_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_moderation")
}

// Forum System
model ForumCategory {
  id           String   @id @default(cuid())
  name         String
  description  String?
  icon         String?
  topicCount   Int      @default(0) @map("topic_count")
  postCount    Int      @default(0) @map("post_count")
  displayOrder Int      @default(0) @map("display_order")
  createdAt    DateTime @default(now()) @map("created_at")

  topics ForumTopic[]

  @@map("forum_categories")
}

model ForumTopic {
  id          String   @id @default(cuid())
  categoryId  String   @map("category_id")
  title       String
  content     String
  authorId    String   @map("author_id")
  isPinned    Boolean  @default(false) @map("is_pinned")
  isLocked    Boolean  @default(false) @map("is_locked")
  viewCount   Int      @default(0) @map("view_count")
  replyCount  Int      @default(0) @map("reply_count")
  lastReplyAt DateTime? @map("last_reply_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")

  category ForumCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  posts    ForumPost[]

  @@map("forum_topics")
}

model ForumPost {
  id        String   @id @default(cuid())
  topicId   String   @map("topic_id")
  content   String
  authorId  String   @map("author_id")
  isEdited  Boolean  @default(false) @map("is_edited")
  editedAt  DateTime? @map("edited_at")
  createdAt DateTime @default(now()) @map("created_at")

  topic     ForumTopic           @relation(fields: [topicId], references: [id], onDelete: Cascade)
  author    User                 @relation(fields: [authorId], references: [id], onDelete: Cascade)
  reactions ForumPostReaction[]

  @@map("forum_posts")
}

model ForumPostReaction {
  id       String @id @default(cuid())
  postId   String @map("post_id")
  userId   String @map("user_id")
  reaction String // 'like', 'dislike', 'laugh', etc.

  post ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("forum_post_reactions")
}

// Achievement System
model Achievement {
  id          String   @id @default(cuid())
  name        String
  description String
  category    String
  rarity      String
  xpReward    Int      @default(0) @map("xp_reward")
  coinReward  Int      @default(0) @map("coin_reward")
  gemReward   Int      @default(0) @map("gem_reward")
  requirementType String @map("requirement_type")
  requirementValue Int  @default(1) @map("requirement_value")
  icon        String?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")

  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String   @id @default(cuid())
  userId        String   @map("user_id")
  achievementId String   @map("achievement_id")
  unlockedAt    DateTime @default(now()) @map("unlocked_at")

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

// CS2 Skin Delivery System
model Cs2SkinDelivery {
  id            String    @id @default(cuid())
  userId        String    @map("user_id")
  skinId        String    @map("skin_id")
  skinName      String    @map("skin_name")
  gemsPaid      Int       @map("gems_paid")
  steamId       String    @map("steam_id")
  steamTradeUrl String    @map("steam_trade_url")
  status        String    @default("pending")
  tradeOfferId  String?   @map("trade_offer_id")
  deliveredAt   DateTime? @map("delivered_at")
  createdAt     DateTime  @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("cs2_skin_deliveries")
}

// Gem Economy Settings
model GemSetting {
  id                    Int  @id @default(autoincrement())
  gemShopEnabled        Boolean @default(true) @map("gem_shop_enabled")
  cs2SkinsEnabled       Boolean @default(true) @map("cs2_skins_enabled")
  exchangeEnabled       Boolean @default(true) @map("exchange_enabled")
  dailyExchangeLimit    Int     @default(10000) @map("daily_exchange_limit")
  maxExchangePerTransaction Int @default(1000) @map("max_exchange_per_transaction")
  gemShopMaintenance    Boolean @default(false) @map("gem_shop_maintenance")

  @@map("gem_settings")
}

model ExchangeRate {
  id           Int @id @default(autoincrement())
  coinsToGems  Int @default(1000) @map("coins_to_gems")
  gemsToCoins  Int @default(800) @map("gems_to_coins")

  @@map("exchange_rates")
}

model GemPackage {
  id          String   @id @default(cuid())
  gems        Int
  price       Decimal  @db.Decimal(10, 2)
  currency    String   @default("USD")
  name        String
  description String?
  enabled     Boolean  @default(true)
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("gem_packages")
}

model Cs2Skin {
  id                String   @id @default(cuid())
  name              String
  rarity            String
  gems              Int
  steamMarketPrice  Decimal  @db.Decimal(10, 2) @map("steam_market_price")
  category          String
  enabled           Boolean  @default(true)
  createdAt         DateTime @default(now()) @map("created_at")

  @@map("cs2_skins")
}

// Payment System
model PaymentSetting {
  id                Int     @id @default(autoincrement())
  stripePublicKey   String? @map("stripe_public_key")
  stripeSecretKey   String? @map("stripe_secret_key")
  paypalClientId    String? @map("paypal_client_id")
  paypalClientSecret String? @map("paypal_client_secret")
  webhookSecret     String? @map("webhook_secret")
  enabled           Boolean @default(false)

  @@map("payment_settings")
}

model GemTransaction {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  type        String
  amount      Int
  currency    String
  description String
  gemsPaid    Int?     @map("gems_paid")
  createdAt   DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("gem_transactions")
}

model PaymentIntent {
  id            String    @id @default(cuid())
  userId        String    @map("user_id")
  amount        Decimal   @db.Decimal(10, 2)
  currency      String    @default("USD")
  status        String    @default("pending")
  stripePaymentIntentId String? @map("stripe_payment_intent_id")
  paypalOrderId String?   @map("paypal_order_id")
  gems          Int
  createdAt     DateTime  @default(now()) @map("created_at")
  completedAt   DateTime? @map("completed_at")

  @@map("payment_intents")
}

// Site Settings
model SiteSetting {
  id          String   @id @default(cuid())
  settingKey  String   @unique @map("setting_key")
  settingValue String  @map("setting_value")
  settingType String   @map("setting_type")
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")

  @@map("site_settings")
}

// Admin System
model AdminLog {
  id        String   @id @default(cuid())
  adminId   String   @map("admin_id")
  action    String
  details   String?
  targetId  String?  @map("target_id")
  createdAt DateTime @default(now()) @map("created_at")

  admin User @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@map("admin_logs")
}

// Provably Fair System
model ServerSeed {
  id         String    @id @default(cuid())
  seed       String
  hashedSeed String    @map("hashed_seed")
  isRevealed Boolean   @default(false) @map("is_revealed")
  createdAt  DateTime  @default(now()) @map("created_at")
  revealedAt DateTime? @map("revealed_at")

  gameResults GameResult[]

  @@map("server_seeds")
}

model ClientSeed {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  seed      String
  createdAt DateTime @default(now()) @map("created_at")

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  gameResults GameResult[]

  @@map("client_seeds")
}

model GameResult {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  gameId       String   @map("game_id")
  gameType     String   @map("game_type")
  serverSeedId String   @map("server_seed_id")
  clientSeedId String   @map("client_seed_id")
  nonce        Int
  result       String   // JSON string
  createdAt    DateTime @default(now()) @map("created_at")

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  serverSeed  ServerSeed  @relation(fields: [serverSeedId], references: [id], onDelete: Cascade)
  clientSeed  ClientSeed  @relation(fields: [clientSeedId], references: [id], onDelete: Cascade)

  @@map("game_results")
}